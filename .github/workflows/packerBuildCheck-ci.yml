name: Build Packer Custom Image

on:
  pull_request:
    # types:
    #   - closed
    branches:
      - main

jobs:
  build-and-deploy:
    # if: github.event.pull_request.merged == true
    name: Build and Deploy Custom Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Enable mysql service
        run: sudo systemctl start mysql

      - name: Create and Set Environment Variables
        shell: bash
        working-directory: ./src
        run: |
          touch .env
          echo "DATABASE_URL=mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_ROOT_PASSWORD }}@localhost:3306/${{ secrets.MYSQL_DATABASE }}" >> .env

      - name: Install Project Dependencies
        run: npm install
        working-directory: src

      - name: Wait for MySQL to be Ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Initialize MySQL Database as Root
        run: |
          sudo mysql -u"${{ secrets.MYSQL_USER }}" --password="${{ secrets.MYSQL_PASSWORD }}" <<EOF
          CREATE DATABASE IF NOT EXISTS \`${{ secrets.MYSQL_DATABASE }}\`;
          EOF

      - name: Run Tests
        working-directory: ./src
        run: npm test
        env:
          DATABASE_URL: mysql://${{ secrets.MYSQL_USER }}:${{ secrets.MYSQL_ROOT_PASSWORD }}@localhost:3306/${{ secrets.MYSQL_DATABASE }}

      - name: Install Packer
        uses: hashicorp/setup-packer@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          ami_users: ${{ secrets.AMI_USERS }}

      # - name: Authenticate with Google Cloud
      #   uses: google-github-actions/auth@v2
      #   with:
      #     credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      # - name: Create JSON File from Secret
      #   run: |
      #     echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' | jq '.' > secret.json

      - name: Initialize Packer Plugins
        run: packer init -upgrade packer/

      - name: Build Custom Image
        id: build-ami
        run: |
          AMI_OUTPUT=$(packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "mysql_password=${{ secrets.MYSQL_ROOT_PASSWORD }}" \
            -var "instance_type=t2.micro" \
            -var "ami_users=[\"${{ secrets.AMI_USERS }}\"]" \
            packer/ | grep -o 'ami-[0-9a-f]\{17\}' | tail -n 1)
          if [ -z "$AMI_OUTPUT" ]; then
            echo "Error: Failed to extract AMI ID from Packer output."
            exit 1
          fi
    
          echo "Built AMI ID: $AMI_OUTPUT"
          echo "ami-id=$AMI_OUTPUT" >> $GITHUB_OUTPUT

      # - name: Build Custom Image
      #   run: |
      #     packer build \
      #       -var "aws_region=${{ secrets.AWS_REGION }}" \
      #       -var "mysql_password=${{ secrets.MYSQL_ROOT_PASSWORD }}" \
      #       -var "instance_type=t2.micro" \
      #       -var "ami_users=[\"${{ secrets.AMI_USERS }}\"]" \
      #       packer/

      - name: Configure AWS Credentials (DEMO) 
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Debug AMI ID
        run: |
          echo "AMI ID is: ${{ steps.build-ami.outputs.ami-id }}"

      # Step 2: Find Launch Template ID Dynamically
      - name: Find Launch Template ID
        id: update-lt
        run: |
          echo "Looking for Launch Template with prefix"
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=myproject-lt*" \
            --query "LaunchTemplates[0].LaunchTemplateId" \
            --output text)

          if [ -z "$LAUNCH_TEMPLATE_ID" ] || [ "$LAUNCH_TEMPLATE_ID" == "None" ]; then
            echo "❌ Launch Template not found."
            exit 1
          fi

          echo "✅ Launch Template ID: $LAUNCH_TEMPLATE_ID"
          echo "launch-template-id=$LAUNCH_TEMPLATE_ID" >> $GITHUB_OUTPUT


          LATEST_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-id "$LAUNCH_TEMPLATE_ID" \
            --query "LaunchTemplateVersions[-1].VersionNumber" \
            --output text)
          if [ -z "$LATEST_VERSION" ]; then
            echo "Error: Failed to retrieve the latest version number for the Launch Template."
            exit 1
          fi
          echo "Latest Launch Template Version: $LATEST_VERSION"
          echo "latest-version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      # Step 3: Create New Launch Template Version with Latest AMI
      - name: Create Launch Template Version
        id: lt-version
        run: |
          echo "Creating new version for Launch Template: ${{ steps.update-lt.outputs.launch-template-id }}"
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id "${{ steps.update-lt.outputs.launch-template-id }}" \
            --source-version "$LATEST_VERSION" \
            --launch-template-data "{\"ImageId\":\"${{ steps.build-ami.outputs.ami-id }}\"}" \
            --query "LaunchTemplateVersion.VersionNumber" \
            --output text)

          if [ -z "$NEW_VERSION" ]; then
            echo "❌ Failed to create new launch template version"
            exit 1
          fi

          echo "✅ New Launch Template Version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # Step 4: Set New Version as Default in Launch Template
      # - name: Set Default Launch Template Version
      #   run: |
      #     echo "Setting new version as default..."
      #     aws ec2 modify-launch-template \
      #       --launch-template-id "$LAUNCH_TEMPLATE_ID" \
      #       --default-version "$NEW_VERSION"

      - name: Set Default Launch Template Version
        run: |
          echo "Setting new version as default..."
          aws ec2 modify-launch-template \
            --launch-template-id "${{ steps.update-lt.outputs.launch-template-id }}" \
            --default-version "${{ steps.lt-version.outputs.version }}"


      # Step 5: Find Auto Scaling Group Name (Optional if hardcoded)
      # - name: Get Auto Scaling Group Name
      #   id: find-asg
      #   run: |
      #     echo "Searching for ASG with prefix: "
      #     ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
      #       --query "AutoScalingGroups[?starts_with(AutoScalingGroupName, '${{ secrets.ASG_PREFIX }}')].AutoScalingGroupName" \
      #       --output text)

      #     if [ -z "$ASG_NAME" ]; then
      #       echo "❌ Auto Scaling Group not found!"
      #       exit 1
      #     fi

      #     echo "✅ ASG Name: $ASG_NAME"
      #     echo "asg-name=$ASG_NAME" >> $GITHUB_OUTPUT

      # Step 6: Update Auto Scaling Group to Use New Launch Template Version
      - name: Update Auto Scaling Group
        run: |
          echo "Updating ASG to use new Launch Template version..."
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name myproject-asg \
            --launch-template "LaunchTemplateId=${{ steps.update-lt.outputs.launch-template-id }},Version=${{ steps.lt-version.outputs.version }}"

      # Step 7: Trigger Instance Refresh
      - name: Start Instance Refresh
        id: refresh
        run: |
          echo "Starting instance refresh on ASG..."
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name myproject-asg \
            --preferences '{"MinHealthyPercentage": 90}' \
            --query "InstanceRefreshId" \
            --output text)

          if [ -z "$REFRESH_ID" ]; then
            echo "❌ Failed to start instance refresh"
            exit 1
          fi

          echo "✅ Instance Refresh ID: $REFRESH_ID"
          echo "InstanceRefreshId=$REFRESH_ID" >> $GITHUB_OUTPUT

      # Step 8: Wait for Instance Refresh Completion
      - name: Wait for Instance Refresh
        run: |
          echo "Waiting for Instance Refresh to complete..."
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name myproject-asg \
              --instance-refresh-ids "${{ steps.refresh.outputs.InstanceRefreshId }}" \
              --query 'InstanceRefreshes[0].Status' \
              --output text)

            echo "Current refresh status: $STATUS"

            if [ "$STATUS" == "Successful" ]; then
              echo "Refresh completed successfully."
              break
            elif [ "$STATUS" == "Failed" ]; then
              echo "Refresh failed."
              exit 1
            fi

            sleep 30
          done
